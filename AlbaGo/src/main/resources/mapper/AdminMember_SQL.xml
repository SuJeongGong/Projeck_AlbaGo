<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.ex.dao.AdminMemberDAO">
	<select id="selectIndividual" resultType="Individual"
		parameterType="hashmap">
		SELECT *
		FROM Individual
		<where>
			<if test="category.equals('individual_id')">
				individual_id like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('phone')">
				phone like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('name')">
				name like CONCAT('%',#{search},'%')
			</if>
		</where>
		LIMIT #{page},10
	</select>
	<!-- 개인 리스트 검색까지 - 갯수 -->
	<select id="selectIndividualCount" resultType="int"
		parameterType="hashmap">
		SELECT Count(*)
		FROM Individual
		<where>
			<if test="category.equals('individual_id')">
				individual_id like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('phone')">
				phone like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('name')">
				name like CONCAT('%',#{search},'%')
			</if>
		</where>
	</select>

	<!-- 개인 회원 정보 상세보기 -->
	<select id="selectIndividualAccount" parameterType="String"
		resultType="Individual">
		SELECT *
		FROM Individual
		<where>
			individual_id=#{invididual_id}
		</where>
	</select>
	<!-- 개인 회원 정보 수정 -->
	<update id="updateIndividualAccount" parameterType="Individual">
		update individual
		set
		password=#{password},
		name = #{name},
		gender =
		#{gender},
		birth = #{birth},
		phone = #{phone},
		education = #{education}
		<where>
			individual_id = #{individual_id}
		</where>
	</update>

	<!-- 개인계정상태변경 -->
	<update id="invididualChangestate" parameterType="hashmap">
		update individual
		set state=#{result}
		<where>
			individual_id = #{individual_id}
		</where>
	</update>

	<!-- 이력서보기 -->
	<select id="selectResume" parameterType="String"
		resultType="Resume">
		SELECT title,date ,resume_id,individual_id
		FROM RESUME
		<where>
			individual_id=#{individual_id}
			AND RESUME.delete_check =1
		</where>
	</select>

	<!-- 이력서관리삭제 ajax -->
	<update id="deleteResume" parameterType="int">
		update resume
		set delete_check = 0
		<where>
			resume_id=#{resume_id}
		</where>
	</update>

	<!-- 지원한 알바 -->
	<select id="selectApplypartjob" parameterType="String"
		resultType="Volunteer">
		Select
		board_recruit.title as board_recruit_title,
		enterprise.name AS
		enterprise_name,
		resume.title as resume_title,
		volunteer.date as date,
		volunteer.result as result,
		volunteer.board_recruit_id as
		board_recruit_id,
		volunteer.individual_id AS individual_id,
		volunteer.volunteer_id,
		board_recruit.delete_check ,
		resume.delete_check
		FROM
		resume,volunteer,board_recruit,enterprise,recruit
		<where>
			resume.resume_id =volunteer.resume_id
			AND
			volunteer.board_recruit_id = board_recruit.board_recruit_id
			AND
			recruit.recruit_id = board_recruit.recruit_id
			AND
			enterprise.enterprise_id = recruit.enterprise_id
			AND
			volunteer.individual_id =#{individual_id}
			AND
			board_recruit.delete_check =1
			AND resume.delete_check=1
		</where>
		ORDER BY volunteer.volunteer_id DESC
	</select>

	<!-- 지원한 알바 취소 AJAX -->
	<delete id="deleteVolunteer" parameterType="int">
		delete from volunteer
		<where>
			volunteer_id=#{volunteer_id}
		</where>
	</delete>

	<!-- 인재 게시판 작성글 -->
	<select id="selectResumeWrite" parameterType="String"
		resultType="BoardResume">
		SELECT
		board_resume.title AS board_resume_title ,
		resume.title AS
		resume_title,
		board_resume.memo,
		board_resume.date,
		board_resume.board_resume_id

		FROM
		board_resume,resume,individual

		<where>
			board_resume.resume_id = resume.resume_id
			AND
			resume.individual_id = individual.individual_id
			AND
			individual.individual_id = #{individual_id}
			AND
			board_resume.delete_check =1
		</where>
	</select>

	<!-- 인재 게시판 취소 AJAX -->
	<update id="deletBoardResume" parameterType="int">
		update board_resume
		set delete_check = 0
		<where>
			board_resume_id=#{board_resume_id}
		</where>
	</update>

	<!--커뮤니티 게시판 작성글 -->
	<select id="selectCommunity" parameterType="String"
		resultType="BoardCommunity">
		SELECT
		community.date AS date,
		title,
		individual.name AS name,
		community.community_id

		FROM community,individual

		<where> community.individual_id=individual.individual_id
			AND
			individual.individual_id=#{individual_id}
		</where>
	</select>

	<!--커뮤니티 게시판 삭제 AJAX -->

	<!-- 커뮤니티글 댓글삭제 -->
	<delete id="deleteComments" parameterType="int">
		DELETE FROM `comment`
		WHERE `comment`.community_id =#{comment_id}
	</delete>
	<!-- 커뮤니티글 글삭제 -->
	<delete id="deleteCommunity" parameterType="int">
		DELETE FROM community
		WHERE community_id = #{community_id}
	</delete>


	<!-- 기업스크랩 -->
	<select id="selectEnterpriseScrap" parameterType="String"
		resultType="Scrap_individual">
		SELECT
		board_recruit.title AS board_recruit_title,
		recruit.title as
		recruit_title ,
		recruit.enterprise_id as enterprise_id,
		scrap_individual_id,
		enterprise.name,
		board_recruit.memo,
		scrap_individual.date AS date,
		board_recruit.board_recruit_id

		From
		scrap_individual, board_recruit ,recruit,enterprise

		<where>
			scrap_individual.board_recruit_id
			=board_recruit.board_recruit_id
			AND recruit.recruit_id =
			board_recruit.recruit_id
			AND
			recruit.enterprise_id=enterprise.enterprise_id
			AND individual_id
			=#{id}
			AND board_recruit.delete_check =1
		</where>
		ORDER BY scrap_individual.date DESC

	</select>
	<!-- 기업스크랩 취소 -->
	<delete id="deleteEnterpriseScrap" parameterType="int">
		delete from
		Scrap_individual where scrap_individual_id = #{scrap_individual_id}
	</delete>

	<!-- ###################################################################### -->
	<!-- 기업회원 관리자 검색 -->
	<select id="selectEnterprise" resultType="Enterprise"
		parameterType="hashmap">
		SELECT *
		FROM Enterprise
		<where>
			<if test="category.equals('enterprise_id')">
				enterprise_id like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('phone')">
				phone like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('name')">
				name like CONCAT('%',#{search},'%')
			</if>
		</where>
		LIMIT #{page},10
	</select>
	<select id="selectEnterpriseCount" resultType="int"
		parameterType="hashmap">
		SELECT Count(*)
		FROM Enterprise
		<where>
			<if test="category.equals('enterprise_id')">
				enterprise_id like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('phone')">
				phone like CONCAT('%',#{search},'%')
			</if>
			<if test="category.equals('name')">
				name like CONCAT('%',#{search},'%')
			</if>
		</where>
	</select>

	<!-- 기업 회원 정보 -->
	<select id="selectEnterpriseAccount" parameterType="String"
		resultType="Enterprise">
		SELECT *
		FROM Enterprise
		<where>
			enterprise_id=#{enterprise_id}
		</where>
	</select>
	<!-- 기업회원정보수정 -->
	<update id="updateEnterpriseAccount" parameterType="int">
		update enterprise
		set
		password=#{password},
		name = #{name},
		business_number = #{business_number},
		manager_name = #{manager_name},
		manager_phone = #{manager_phone},
		address = #{address},
		category =
		#{category},
		up_count = #{up_count},
		resume_count = #{resume_count},
		board_recruit_count = #{board_recruit_count}
		<where>
			enterprise_id = #{enterprise_id}
		</where>
	</update>
	<!-- 기업 계정정지 -->
	<update id="changeEnterprisestate" parameterType="hashmap">
		update enterprise
		set state=#{result}
		<where>
			enterprise_id = #{enterprise_id}
		</where>
	</update>
	<!-- 공고관리 -->
	<select id="selectRecruit" parameterType="String"
		resultType="Recruit">
		SELECT
		recruit.title,recruit.date,recruit.place,recruit.recruit_id,board_recruit.board_recruit_id
		FROM Recruit,board_recruit
		<where>
			Recruit.recruit_id=board_recruit.recruit_id
			AND
			enterprise_id =
			#{enterprise_id}

			AND board_recruit.delete_check=1
		</where>
	</select>
	<!-- 공고관리삭제 ajax -->
	<update id="deleteEnterpriseRecruit" parameterType="int">
		update recruit
		set delete_check = 0
		<where>
			recruit_id=#{recruit_id}
		</where>
	</update>

	<!-- 공고게시판 작성글 -->
	<select id="selectRecruitWrite" parameterType="String"
		resultType="BoardRecruit">
		SELECT
		board_recruit.title,
		recruit.title AS recruit_title,
		board_recruit.memo,
		board_recruit.date,board_recruit_id,
		recruit.recruit_id


		FROM board_recruit ,recruit,enterprise

		<where>
			board_recruit.recruit_id = recruit.recruit_id
			AND
			recruit.enterprise_id = enterprise.enterprise_id
			AND
			enterprise.enterprise_id = #{enterprise_id}

			AND
			board_recruit.delete_check =1
		</where>
	</select>

	<!-- 공고글 관리 삭제 ajax -->
	<update id="deleteEnterpriseBoardRecruit" parameterType="int">
		update board_recruit
		set delete_check = 0
		<where>
			board_recruit_id = #{board_recruit_id}
		</where>
	</update>


	<!-- 인재스크랩 -->
	<select id="selectScrap" parameterType="String"
		resultType="Scrap_enterprise">

		SELECT
		board_resume.title AS board_resume_title,
		resume.title as
		resume_title ,
		resume.individual_id as individual_id,
		scrap_enterprise_id,
		individual.name,
		board_resume.memo,
		resume.resume_id,
		board_resume.board_resume_id,
		scrap_enterprise.date AS
		date

		From scrap_enterprise, board_resume ,resume,individual

		<where>
			scrap_enterprise.board_resume_id =board_resume.board_resume_id
			AND resume.resume_id = board_resume.resume_id
			AND
			resume.individual_id=individual.individual_id
			AND enterprise_id
			=#{enterprise_id}
			AND board_resume.delete_check =1
		</where>
		ORDER BY scrap_enterprise.date DESC

	</select>
	<!-- 인재스크랩 취소 -->
	<delete id="deleteScrap" parameterType="int">
		delete from
		Scrap_enterprise where scrap_enterprise_id = #{scrap_id}
	</delete>
			<select id="selectPayment"  parameterType="String" resultType="Payment">
	
		SELECT 
		product.name AS name,
		product.price AS product_price,
		product.term AS term,
		payment.date AS date
		FROM payment , enterprise,product
		<where> 
		payment.enterprise_id=enterprise.enterprise_id
		AND payment.product_id=product.product_id
		AND enterprise.enterprise_id=#{enterprise_id}
		AND product.delete_check =1
		</where>
		ORDER BY date DESC
		</select>
				
		<select id="sumPayment" parameterType="String" resultType="product">
		SELECT  SUM(price) AS sum_price 
		FROM product,payment,enterprise

		<where>  
		product.product_id =payment.product_id 
		AND payment.enterprise_id=enterprise.enterprise_id	
		AND enterprise.enterprise_id=#{enterprise_id}
		AND product.delete_check=1
		AND payment.result="승인"
		</where>
		</select>	
</mapper>